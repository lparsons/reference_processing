# Rules for processing references and annotation files from NCBI
#
# Input:
#   {organism}.gff - GFF downloaded from NCBI
#   {organism}.fna - Fasta sequence
#   ORGANISMS - List of organism names
#
# NCBI GFF Downloads
# ftp://ftp.ncbi.nlm.nih.gov/genomes/all/
#
# Output:
#   {organism}.gtf - GTF file generated by 'gffread' from tophat package
#   {organism}.bed - BED12 file generated by converting the GTF file
#   {organism}_parsed.gff - GFF file generated by parsing NCBI GFF through 'gffread'
#       Note: GFF parsing sometimes fails with segmentation fault
#   {organism}_gene_ids_unique_coverage.txt - Gene ids along with amount of the
#       gene that is unambiguous with respect to other genes on the same strand.
#   {organism}_gene_annotations.txt - Gene annotations for each gene id
#
#
# Example:
#   snakemake

configfile: "NCBIconfig.json"

rule all:
    #input: "%s.fna.fai" % config["FILE_BASE"],
    input: "%s.gtf" % config["FILE_BASE"],
           "%s_entrezid.gtf" % config["FILE_BASE"],
           "%s.bed" % config["FILE_BASE"]

# rule samtools_faidx:
#     input: "{file}"
#     output: "{file}.fai"
#     shell: 'samtools faidx "{input}"'
#
rule extract_gff_attributes:
    input: "{file}.gff"
    output: "{file}_gff_attributes.txt"
    script: './extract_ids_from_gff.py' # "{input}" -f gene --attributes ID Name Dbxref --dbxref_attributes GeneID CGNC > "{output}"'

rule gff_to_gtf:
    input: gff="{file}.gff"
           # fasta="{file}.fna",
           # fasta_fai="{file}.fna.fai"
    output: temp("{file}_raw.gtf")
    log: "{file}_gffread.log"
    shell: 'gffread ' + # gffread from Cufflinks suite
        # '-g "{input.fasta}" ' +
        # '-s "{input.fasta_fai}" ' +
        # '-F ' + # Full GFF attribute preservation
        # '-O ' + # process also non-transcript GFF records (by default non-transcript records are ignored)
        '-E ' + # expose (warn about) duplicate transcript IDs and other potential problems with the given GFF/GTF records
        '-D ' + # decode url encoded characters within attributes
        '-T ' + # -o option will output GTF format instead of GFF3
        '-o "{output}" ' + # the "filtered" GFF records will be written to <outfile.gff>
        '"{input.gff}" ' + # input GFF file
        '2> "{log}"' # Output warnings to logfile

rule clean_gtf:
    input: "{file}_raw.gtf"
    output: "{file}.gtf"
    script: './fix_gtf.py'

rule gtf_entrezid:
    input: gtf="{file}.gtf",
           lookup="{file}_gff_attributes.txt"
    output: "{file}_entrezid.gtf"
    script: './translate_gtf_attribute.py' # -f 1 -t 3 "{input.gtf}" "{input.lookup}" > "{output}"'

rule gtf_to_genePred:
    input: "{file}.gtf"
    output: temp("{file}.genePred")
    shell: 'gtfToGenepred "{input}" "{output}"'

rule genePred_to_bed12:
    input: "{file}.genePred"
    output: "{file}.bed"
    shell: 'genePredToBed "{input}" "{output}"'
