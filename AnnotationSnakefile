# Rules for generating bacterial annotation files from NCBI gff files
#
# Input:
#   {organism}.gff - GFF downloaded from NCBI
#   {organism}.fasta - Fasta sequence
#   ORGANISMS - List of organism names
#
# NCBI GFF Downloads
# ftp://ftp.ncbi.nlm.nih.gov/genomes/
#
# Output:
#   {organism}.gtf - GTF file generated by 'gffread' from tophat package
#   {organism}.bed - BED12 file generated by converting the GTF file
#   {organism}_parsed.gff - GFF file generated by parsing NCBI GFF through 'gffread'
#       Note: GFF parsing sometimes fails with segmentation fault
#   {organism}_gene_ids_unique_coverage.txt - Gene ids along with amount of the
#       gene that is unambiguous with respect to other genes on the same strand.
#   {organism}_gene_annotations.txt - Gene annotations for each gene id
#
#
#
# TEMPLATE
# #########
#
# ORGANISMS = ["escherichia_coli_k12_nc_000913_3",
#              "pseudomonas_aeruginosa_pao1_nc_002516_2",
#              "staphylococcus_aureus_subsp__aureus_str__newman_nc_009641_1"]
#
# rule all:
#     input: expand("{organism}.bed", organism=ORGANISMS),
#            # GFF Parsing sometimes fails with segmentation fault
#            #expand("{organism}_parsed.gff", organism=ORGANISMS),
#            # Don't always need gene names file
#            # expand("{organism}_gene_names.txt", organism=ORGANISMS),
#            expand("{organism}_gene_ids_unique_coverage.txt", organism=ORGANISMS),
#            expand("{organism}_gene_annotations.txt", organism=ORGANISMS)
#
#
# REFPROCESSING_DIR = "/Users/lparsons/Documents/projects/reference_processing"
# include: "%s/AnnotationSnakefile" % REFPROCESSING_DIR

GENEID = os.environ.get("GENEID", "GeneID:")
if REFPROCESSING_DIR is None:
    REFPROCESSING_DIR = "."

rule fasta_index:
    input: "{file}"
    output: "{file}.fai"
    shell: "samtools faidx {input}"

rule gtf:
    input: gff="{organism}.gff", fasta="{organism}.fasta"
    output: gtf="{organism}.gtf", errors="{organism}_gtf_errors.txt"
    shell: "gffread -E -T -g {input.fasta} -o {output.gtf} {input.gff} 2>{output.errors}"

rule parsed_gff:
    input: gff="{organism}.gff", fasta="{organism}.fasta"
    output: gff="{organism}_parsed.gff", errors="{organism}_gff_errors.txt"
    shell: "gffread -E -g {input.fasta} -o {output.gff} {input.gff} 2>{output.errors}"

rule genes_gff:
    input: "{organism}.gff"
    output: temporary("{organism}_genes.gff")
    shell: "grep \"\\tgene\\t\" {input} > {output}"

rule cds_gff:
    input: "{organism}.gff"
    output: temporary("{organism}_cds.gff")
    shell: "grep \"\\tCDS\\t\" {input} > {output}"

rule plus_genes_gff:
    input: "{organism}_genes.gff"
    output: temporary("{organism}_genes_plus.gff")
    shell: "grep \"\\t+\\t\" {input} > {output}"

rule minus_genes_gff:
    input: "{organism}_genes.gff"
    output: temporary("{organism}_genes_minus.gff")
    shell: "grep \"\\t-\\t\" {input} > {output}"

rule plus_genes_nonoverlaping:
    input: gff="{organism}_genes_plus.gff", fai="{organism}.fasta.fai"
    output: temporary("{organism}_plus_genes_nonoverlapping.bed")
    shell: "bedtools genomecov -i {input.gff} -bg -g {input.fai} | grep \"\\t1$\" > {output}"

rule minus_genes_nonoverlaping:
    input: gff="{organism}_genes_minus.gff", fai="{organism}.fasta.fai"
    output: temporary("{organism}_minus_genes_nonoverlapping.bed")
    shell: "bedtools genomecov -i {input.gff} -bg -g {input.fai} | grep \"\\t1$\" > {output}"

rule plus_genes_unique_coverage:
    input: genes="{organism}_genes_plus.gff",
           nonoverlap="{organism}_plus_genes_nonoverlapping.bed"
    output: temporary("{organism}_genes_plus_with_unique_coverage.txt")
    shell: "bedtools coverage -a {input.nonoverlap} -b {input.genes} > {output}"

rule minus_genes_unique_coverage:
    input: genes="{organism}_genes_minus.gff",
           nonoverlap="{organism}_minus_genes_nonoverlapping.bed"
    output: temporary("{organism}_genes_minus_with_unique_coverage.txt")
    shell: "bedtools coverage -a {input.nonoverlap} -b {input.genes} > {output}"

rule genes_with_coverage:
    input: plus="{organism}_genes_plus_with_unique_coverage.txt",
           minus="{organism}_genes_minus_with_unique_coverage.txt"
    output: temporary("{organism}_genes_with_unique_coverage.txt")
    shell: "cat {input.plus} {input.minus} | sort -k 1,1 -k4,4n > {output}"

rule genes_ids_with_coverage:
    input: "{organism}_genes_with_unique_coverage.txt",
    output: "{organism}_gene_ids_unique_coverage.txt"
    shell: "perl -np -e's/ID=(.+?);.+?\\t/$1\\t/' < {input} | cut -f 9,11,12,13 | bedtools groupby -g 1 -c 2,3 -o sum,sum | awk -F'\\t' -v OFS='\\t' '{{ print $1,$2,$3,$2/$3 }}' > {output}"

rule gene_names:
    input: "{organism}_genes.gff"
    output: temporary("{organism}_gene_names.txt")
    shell: "awk -F'\\t' -v OFS='\\t' '{{print $9}}' {input} | perl -n -e'/ID=(.+?);.*Name=(.+?)[;\\n]/ && print \"$1\\t$2\\n\"' | sort - > {output}"

rule gene_ids:
    input: "{organism}_genes.gff"
    output: temporary("{organism}_gene_ids.txt")
    shell: "{REFPROCESSING_DIR}/extract_ids_from_gff.py {input} --attributes ID Name Dbxref locus_tag > {output}"

rule cds_products:
    input: cds="{organism}_cds.gff"
    output: temporary("{organism}_cds_products.txt")
    shell: "awk -F'\\t' -v OFS='\\t' '{{print $9}}' {input.cds} | perl -n -e'/Parent=(.+?);.*product=(.+?);/ && print \"$1\\t$2\\n\"' | sort - > {output}"

rule cds_notes:
    input: cds="{organism}_cds.gff"
    output: temporary("{organism}_cds_notes.txt")
    shell: "awk -F'\\t' -v OFS='\\t' '{{print $9}}' {input.cds} | perl -n -e'/Parent=(.+?);.*Note=(.+?);/ && print \"$1\\t$2\\n\"' | sort - > {output}"

rule gene_annotation_table:
    input: geneids="{organism}_gene_ids.txt", products="{organism}_cds_products.txt", notes="{organism}_cds_notes.txt"
    output: "{organism}_gene_annotations.txt"
    shell: "echo -e \"#ID\\tGene symbol\\tNCBI Gene ID\\tLocus tag\\tGene description\\tNotes\" > {output} && join -a 1 -t $'\\t' -e '.' -o 1.1,1.2,1.3,1.4,2.2 {input.geneids} {input.products} | join -a 1 -t $'\\t' -e '.' -o 1.1,1.2,1.3,1.4,1.5,2.2 - {input.notes} | bedtools groupby -g 1,2,3,4 -c 5,6 -o distinct,distinct >> {output}"

rule gtf2bed12:
    input: "{organism}.gtf"
    output: "{organism}.bed"
    shell: "{REFPROCESSING_DIR}/gtf2bed.py {input} --exon_features CDS exon --name_attribute=gene_name > {output}"
